import honey.vcs.git.Git

apply plugin: 'groovy'
apply plugin: 'idea'
//apply plugin: 'com.bmuschko.nexus'
apply plugin: 'maven-publish'


group = 'com.antwerkz.github'
version = '1.2.0'

buildscript {
  ext.versions = [
    'kgit'    : '0.0.5'
  ]

  repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://raw.github.com/chaschev/kgit/repository' }
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
  }

  dependencies {
//    classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    classpath "honey:kgit:${versions.kgit}"
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://raw.github.com/chaschev/kgit/repository' }
  maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
}

dependencies {
  compile gradleApi()

  compile('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
    exclude group: 'org.codehaus.groovy', module: 'groovy'
  }

  compile('org.kohsuke:github-api:1.90') {
    exclude group: 'com.infradna.tool'
  }

  compile 'org.eclipse.jgit:org.eclipse.jgit:4.9.0.201710071750-r'
  compile "honey:kgit:${versions.kgit}"
}

task wrapper(type: Wrapper) {
  gradleVersion = "4.0.0"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }

  repositories {
    maven {
      url "$buildDir/$project.name-repository"
    }
  }
}

println("$project, $project.name")

def repoPath = "$buildDir/$project.name-repository"
def versionPath = "$repoPath/${group.split('\\.').join('/')}/$name/$version"

def repoDir = new File(repoPath)
def versionDir = new File(versionPath)

//publishToMavenLocal
//publishMavenJavaPublicationToMavenRepository

jar.doLast {
  println("getting repo...")
  def git = new Git(repoDir, "https://github.com/chaschev/github-release-gradle-plugin.git")

  println("checking out repo branch...")
  git.checkoutBranch("repository", null, false, true, true)
}

publish.doLast{
  def git = new Git(repoDir, "https://github.com/chaschev/github-release-gradle-plugin.git")

  def addPath = versionPath.substring(repoPath.length() + 1)

  println("adding path $addPath ($versionPath) to commit...")

  git.addAll(addPath)

  def status = git.git.status().call()

  println(status)

  println "status - modified: ${status.modified.size()} ${status.modified}, added: ${status.added.size()}, removed: ${status.removed.size()}"

  git.commit("publish version $version")

  println("pushing to git...")

  git.push(true,true)
}



/*
project.ext.mavenDeployers = []

def pom = { config ->
  project.mavenDeployers*.pom config
}



install {
  project.mavenDeployers << repositories.mavenInstaller
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }
    }
  }

  project.mavenDeployers << repositories.mavenDeployer {
    beforeDeployment {
      MavenDeployment deployment -> signing.signPom(deployment)
    }

    def nexusCredentials = [
            userName: project.properties.nexusUsername,
            password: project.properties.nexusPassword
    ]

    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
      authentication(nexusCredentials)
    }

    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
      authentication(nexusCredentials)
    }
  }
}


nexus {
  sign = true
}


modifyPom {
  project {
    name 'Github Gradle Release Plugins'
    description = 'Set of plugins that can help you to release your project on Github'
    url 'http://github.com/chaschev/github-release-gradle-plugin'
    version = project.version

    scm {
      url 'git@github.com:chaschev/github-release-gradle-plugin.git'
      connection 'scm:git:git@github.com:chaschev/github-release-gradle-plugin.git'
      developerConnection 'scm:git:git@github.com:chaschev/github-release-gradle-plugin.git'
    }

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    developers {
      developer {
        id 'trnl'
        name 'Uladzimir Mihura'
        url = 'http://github.com/trnl'
      }
      developer {
        id 'evanchooly'
        name 'Justin Lee'
        url = 'http://github.com/evanchooly'
      }
      developer {
        id 'chaschev'
        name 'Andrey Chaschev'
        url = 'http://github.com/chaschev'
      }

    }
  }
}
*/
